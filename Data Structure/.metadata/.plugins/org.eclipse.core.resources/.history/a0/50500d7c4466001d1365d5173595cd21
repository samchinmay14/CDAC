package queue_3;

public class Queue_prio 
{
	private int front;
	private int rear;
	private int size;
	private Element[]arr;
	
	public Queue_prio()
	{
		front=rear=-1;
		size=5;
		arr=new Element[5];
	}
	public Queue_prio(int size)
	{
		front=rear=-1;
		this.size=size;
		arr=new Element[size];
	}
	
	public boolean isFull()
	{
		return front==(rear+1)%size;
	}
	
	public boolean isEmpty()
	{
		return front==-1;
	}
	
	public void sort(Element []array)
	{
		boolean flag;
		for(int i=0;array[i]!=null;i++)
		{
			for(int j=0;j<array.length-i-1;j++)
			{
				Element temp=array[j];
				if(array[j].prio<array[j+1].prio)
				{
					array[j]=array[j+1];
					array[j+1]=temp;
				}
			}
		}
	}
	public void enQueue(Element e)
	{
		
		if(!isFull())
		{
			if(front==-1)
			{
				front=0;
			}
			rear=(rear+1)%size;
			arr[rear]=e;
//			for(int i=0;i<arr.length;i++)
//			{
//				Element temp
//			}
		}
		else
			System.out.println("Queue Full!!");
		
	}
	
	public Element deQueue()
	{
		int d=-9999;
		int p=-1;
		if(!isEmpty())
		{
			d=arr[front].data;
			p=arr[front].prio;
			if(front==rear)
			{
				front=rear=-1;
			}
			else
			{
				front=(front+1)%size;
			}
		}
		Element ed=new Element(d,p);
		return ed;
	}
	
	public void display()
	{
		if(front!=-1)
		{
			for(int i=front;i!=rear;i=(i+1)%size)
			{
				System.out.print(arr[i]);
			}
			System.out.println(arr[rear]);
		}
		else
			System.out.println("Queue Empty!!");
		System.out.println("\nFront : "+front+"\nRear : "+rear);
	}
}
